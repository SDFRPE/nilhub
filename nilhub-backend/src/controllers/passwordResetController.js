// backend/src/controllers/passwordResetController.js
const Usuario = require('../models/Usuario');
const PasswordReset = require('../models/PasswordReset');
const bcrypt = require('bcryptjs');
const { enviarCodigoRecuperacion, enviarConfirmacionCambio } = require('../services/emailService');

/**
 * Funci√≥n helper para normalizar emails consistentemente
 * Solo lowercase + trim (respeta puntos y s√≠mbolos)
 */
const normalizarEmail = (email) => {
  if (!email) return '';
  return email.toLowerCase().trim();
};

/**
 * Generar c√≥digo aleatorio de 6 d√≠gitos
 */
const generarCodigo = () => {
  return Math.floor(100000 + Math.random() * 900000).toString();
};

/**
 * POST /api/auth/forgot-password
 * Solicitar c√≥digo de recuperaci√≥n
 */
const solicitarRecuperacion = async (req, res) => {
  try {
    const { email, metodo } = req.body;

    // Validaciones
    if (!email || !metodo) {
      return res.status(400).json({
        success: false,
        error: 'Email y m√©todo son requeridos'
      });
    }

    if (!['email', 'whatsapp'].includes(metodo)) {
      return res.status(400).json({
        success: false,
        error: 'M√©todo inv√°lido. Usa "email" o "whatsapp"'
      });
    }

    // Normalizar email
    const emailNormalizado = normalizarEmail(email);

    // Buscar usuario
    const usuario = await Usuario.findOne({ email: emailNormalizado });

    if (!usuario) {
      // Por seguridad, no revelamos si el email existe o no
      console.log(`‚ö†Ô∏è EMAIL NO ENCONTRADO: ${email} (normalizado: ${emailNormalizado})`);
      return res.status(200).json({
        success: true,
        message: 'Si el email existe, recibir√°s un c√≥digo de recuperaci√≥n'
      });
    }

    // Verificar si ya hay una solicitud reciente (√∫ltimos 5 minutos)
    const solicitudReciente = await PasswordReset.findOne({
      email: emailNormalizado,
      createdAt: { $gte: new Date(Date.now() - 5 * 60 * 1000) }
    });

    if (solicitudReciente) {
      return res.status(429).json({
        success: false,
        error: 'Ya solicitaste un c√≥digo recientemente. Espera 5 minutos.'
      });
    }

    // Generar c√≥digo
    const code = generarCodigo();

    // Crear registro de reset
    const passwordReset = new PasswordReset({
      usuario_id: usuario._id,
      email: usuario.email,
      code: code,
      metodo: metodo,
      expira: new Date(Date.now() + 60 * 60 * 1000) // 1 hora
    });

    await passwordReset.save();

    // MOSTRAR C√ìDIGO EN CONSOLA (SIEMPRE - para desarrollo)
    console.log('');
    console.log('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
    console.log('‚ïë     üîê C√ìDIGO DE RECUPERACI√ìN            ‚ïë');
    console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù');
    console.log(`  üìß Email: ${usuario.email}`);
    console.log(`  üë§ Usuario: ${usuario.nombre}`);
    console.log(`  üî¢ C√≥digo: ${code}`);
    console.log(`  üì± M√©todo: ${metodo}`);
    console.log(`  ‚è∞ Expira: ${passwordReset.expira.toLocaleString('es-PE')}`);
    console.log('');

    // üî• ENVIAR EMAIL SI EL M√âTODO ES EMAIL
    if (metodo === 'email') {
      try {
        await enviarCodigoRecuperacion(usuario.email, usuario.nombre, code);
        console.log('‚úÖ Email enviado exitosamente a:', usuario.email);
      } catch (emailError) {
        console.error('‚ùå Error al enviar email:', emailError.message);
        // No lanzar error - el c√≥digo ya est√° guardado y mostrado en consola
      }
    }

    // üì≤ ENVIAR WHATSAPP SI EL M√âTODO ES WHATSAPP (futuro)
    if (metodo === 'whatsapp') {
      console.log('üì≤ WhatsApp: Integraci√≥n pendiente (Twilio API)');
      // TODO: Implementar env√≠o por WhatsApp con Twilio
    }

    return res.status(200).json({
      success: true,
      message: metodo === 'email' 
        ? `C√≥digo enviado a ${email}. Revisa tu bandeja de entrada.` 
        : 'C√≥digo generado. Revisa la consola del servidor.',
      // ‚ö†Ô∏è SOLO EN DESARROLLO - Mostrar c√≥digo en respuesta
      code: process.env.NODE_ENV === 'development' ? code : undefined
    });

  } catch (error) {
    console.error('‚ùå Error en solicitarRecuperacion:', error);
    return res.status(500).json({
      success: false,
      error: 'Error al procesar la solicitud'
    });
  }
};

/**
 * POST /api/auth/verify-reset-code
 * Verificar que el c√≥digo es v√°lido
 */
const verificarCodigo = async (req, res) => {
  try {
    const { email, code } = req.body;

    if (!email || !code) {
      return res.status(400).json({
        success: false,
        error: 'Email y c√≥digo son requeridos'
      });
    }

    // Normalizar email
    const emailNormalizado = normalizarEmail(email);

    // Buscar reset activo
    const passwordReset = await PasswordReset.findOne({
      email: emailNormalizado,
      code: code.trim()
    });

    if (!passwordReset) {
      return res.status(400).json({
        success: false,
        error: 'C√≥digo inv√°lido'
      });
    }

    // Verificar si es v√°lido
    if (!passwordReset.esValido()) {
      let mensaje = 'C√≥digo inv√°lido o expirado';
      
      if (passwordReset.usado) {
        mensaje = 'Este c√≥digo ya fue usado';
      } else if (passwordReset.intentos >= 3) {
        mensaje = 'Has superado el n√∫mero m√°ximo de intentos';
      } else if (passwordReset.expira < new Date()) {
        mensaje = 'El c√≥digo ha expirado';
      }

      return res.status(400).json({
        success: false,
        error: mensaje
      });
    }

    // Incrementar contador de intentos
    await passwordReset.incrementarIntentos();

    return res.status(200).json({
      success: true,
      message: 'C√≥digo v√°lido'
    });

  } catch (error) {
    console.error('‚ùå Error en verificarCodigo:', error);
    return res.status(500).json({
      success: false,
      error: 'Error al verificar el c√≥digo'
    });
  }
};

/**
 * POST /api/auth/reset-password
 * Cambiar la contrase√±a usando el c√≥digo
 */
const resetPassword = async (req, res) => {
  try {
    const { email, code, nuevaPassword } = req.body;

    // Validaciones
    if (!email || !code || !nuevaPassword) {
      return res.status(400).json({
        success: false,
        error: 'Todos los campos son requeridos'
      });
    }

    if (nuevaPassword.length < 6) {
      return res.status(400).json({
        success: false,
        error: 'La contrase√±a debe tener al menos 6 caracteres'
      });
    }

    // Normalizar email
    const emailNormalizado = normalizarEmail(email);

    // Buscar reset
    const passwordReset = await PasswordReset.findOne({
      email: emailNormalizado,
      code: code.trim()
    });

    if (!passwordReset || !passwordReset.esValido()) {
      return res.status(400).json({
        success: false,
        error: 'C√≥digo inv√°lido o expirado'
      });
    }

    // Buscar usuario
    const usuario = await Usuario.findById(passwordReset.usuario_id);

    if (!usuario) {
      return res.status(404).json({
        success: false,
        error: 'Usuario no encontrado'
      });
    }

    // Hashear nueva contrase√±a manualmente
    const salt = await bcrypt.genSalt(10);
    const passwordHash = await bcrypt.hash(nuevaPassword, salt);

    // ‚ö†Ô∏è IMPORTANTE: Usar updateOne para BYPASS del middleware pre-save
    // Esto evita que se hashee dos veces
    await Usuario.updateOne(
      { _id: usuario._id },
      { $set: { password: passwordHash } }
    );

    // Marcar c√≥digo como usado
    await passwordReset.marcarComoUsado();

    console.log(`‚úÖ Contrase√±a actualizada para: ${usuario.email}`);

    // üìß Enviar email de confirmaci√≥n
    try {
      await enviarConfirmacionCambio(usuario.email, usuario.nombre);
      console.log('‚úÖ Email de confirmaci√≥n enviado');
    } catch (emailError) {
      console.error('‚ö†Ô∏è No se pudo enviar email de confirmaci√≥n:', emailError.message);
      // No lanzar error - la contrase√±a ya se cambi√≥ exitosamente
    }

    return res.status(200).json({
      success: true,
      message: 'Contrase√±a actualizada exitosamente'
    });

  } catch (error) {
    console.error('‚ùå Error en resetPassword:', error);
    return res.status(500).json({
      success: false,
      error: 'Error al actualizar la contrase√±a'
    });
  }
};

module.exports = {
  solicitarRecuperacion,
  verificarCodigo,
  resetPassword
};